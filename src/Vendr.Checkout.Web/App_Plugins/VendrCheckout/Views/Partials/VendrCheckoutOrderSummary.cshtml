@using Umbraco.Web.Composing;
@model Vendr.Core.Models.OrderReadOnly
@{
    var currentPage = Current.UmbracoContext.PublishedRequest.PublishedContent;

    var store = currentPage.GetStore();

    var currentOrder = Model;
    var currentPaymentMethod = currentOrder.PaymentInfo.PaymentMethodId.HasValue
        ? VendrApi.Instance.GetPaymentMethod(currentOrder.PaymentInfo.PaymentMethodId.Value)
        : null;

    var checkoutPage = currentPage.GetCheckoutPage();
    var themeColor = currentPage.GetThemeColor();

    // If we are on step 2 of the inline checkout, then any ajax
    // updates should re-fetch the main body so keep step 2
    // but if we aren't on step 2, set our step to -1 so that
    // all we fetch is an updated cart summary. We do this
    // so that if someone is mid way through filling in their
    // personal details but hasn't saved yet, and redeems a
    // discount then the changes don't get lost.
    var ajaxStep = Request.QueryString["step"] == "2" ? 2 : -1;
}
<div id="order-summary" class="hidden bg-gray-100 w-full p-8 lg:w-2/5 lg:border-l lg:block">
    
    <div class="lg:sticky" style="top: 2rem;">

        <div data-overlay class="bg-gray-100 absolute top-0 left-0 right-0 bottom-0 opacity-75 hidden" onclick="function (e) { e.stopPropagation(); }"></div>

        <ul>
            @foreach (var orderLine in currentOrder.OrderLines)
            {
                <li class="border-b border-gray-300 pb-4 mb-4">
                    <div class="flex items-center">

                        <div class="flex flex-1 items-center">
                            <div><span class="font-medium">@(orderLine.Name) x @((int)orderLine.Quantity)</span><br /><span class="text-xs text-gray-500">@(orderLine.Sku)</span></div>
                        </div>

                        <div class="pl-4 font-medium">@(orderLine.TotalPrice.Value.Formatted().WithoutTax)</div>

                    </div>
                </li>
            }
        </ul>

        @if (!currentOrder.IsFinalized)
        {
            <div class="pb-4 mb-4 border-b border-gray-300 ">
                @using (Html.BeginUmbracoForm("ApplyDiscountOrGiftCardCode", "VendrCheckoutSurface", null, new { @class = "flex w-full m-0", data_ajax_form = 1, data_ajax_view = currentPage.Url() + "?step=" + ajaxStep }))
                {
                    @Html.AntiForgeryToken();

                    <input type="text" name="code" placeholder="Discount / Gift Card Code" class="flex-1 py-2 px-4 border rounded placeholder-gray-700" />
                    <button class="ml-4 bg-@(themeColor) text-white px-4 rounded hover:bg-gray-900" type="submit">Apply</button>
                }

                @if (currentOrder.DiscountCodes.Count > 0 || currentOrder.GiftCards.Count > 0)
                {
                    <ul class="mt-4 block">
                        @foreach (var discountCode in currentOrder.DiscountCodes)
                        {
                            <li class="inline-block mr-2"><a href="@Url.SurfaceAction("RemoveDiscountOrGiftCardCode", "VendrCheckoutSurface", new { Code = discountCode.Code })" data-ajax-link="@(currentPage.Url())?step=@(ajaxStep)" class="inline-block bg-gray-300 px-2 rounded hover:bg-gray-900 hover:text-white"><i class="fa fa-times mr-1"></i> @discountCode.Code</a></li>
                        }
                        @foreach (var giftCard in currentOrder.GiftCards)
                        {
                            <li class="inline-block mr-2"><a href="@Url.SurfaceAction("RemoveDiscountOrGiftCardCode", "VendrCheckoutSurface", new { Code = giftCard.Code })" data-ajax-link="@(currentPage.Url())?step=@(ajaxStep)" class="inline-block bg-gray-300 px-2 rounded hover:bg-gray-900 hover:text-white"><i class="fa fa-times mr-1"></i> @giftCard.Code</a></li>
                        }
                    </ul>
                }
            </div>
        }

        <div class="flex w-full justify-between items-center">
            <div class="">Subtotal</div>
            <div class="font-medium">@(currentOrder.SubtotalPrice.WithoutDiscounts.Formatted().WithoutTax)</div>
        </div>

        @if (checkoutPage.Value<bool>("vendrCollectShippingInfo"))
        {
            var currentShippingMethod = currentOrder.ShippingInfo.ShippingMethodId.HasValue
            ? VendrApi.Instance.GetShippingMethod(currentOrder.ShippingInfo.ShippingMethodId.Value)
            : null;

            if (currentShippingMethod != null)
            {
                <div class="flex w-full justify-between items-center mt-2">
                    <div class="">
                        Shipping via @(currentShippingMethod.Name)
                    </div>
                    <div class="font-medium">@(currentOrder.ShippingInfo.TotalPrice.WithoutDiscounts.Formatted().WithoutTax)</div>
                </div>
            }
        }

        @if (currentPaymentMethod != null && currentPaymentMethod.PaymentProviderAlias != "zeroValue")
        {
            <div class="flex w-full justify-between items-center mt-2">
                <div class="">
                    Payment via @(currentPaymentMethod.Name)
                </div>
                <div class="font-medium">@(currentOrder.PaymentInfo.TotalPrice.WithoutDiscounts.Formatted().WithoutTax)</div>
            </div>
        }

        @if (currentOrder.TotalPrice.TotalDiscount > 0)
        {
            <div class="flex w-full justify-between items-center mt-2 ">
                <div class="">Discounts</div>
                <div class="font-medium">-@currentOrder.TotalPrice.TotalDiscount.Formatted().WithoutTax</div>
            </div>
        }

        <div class="flex w-full justify-between items-center mt-2">
            <div class="">TAX</div>
            <div class="font-medium">@(currentOrder.TotalPrice.Value.Formatted().Tax)</div>
        </div>

        @if (currentOrder.TotalPrice.GiftCardsAmount.Value > 0)
        {
            foreach (var giftCard in currentOrder.GiftCards)
            {
                <div class="flex w-full justify-between items-center mt-2">
                    <div class="">Gift Card (@(giftCard.Code))</div>
                    <div class="font-medium">-@(giftCard.Amount.Formatted())</div>
                </div>
            }
        }

        <hr class="border-t border-gray-300 my-4" />

        <div class="flex w-full justify-between items-center">
            <div class="font-medium text-base">Total</div>
            <div class="font-medium text-2xl">@currentOrder.TotalPrice.Value.Formatted()</div>
        </div>

    </div>
</div>